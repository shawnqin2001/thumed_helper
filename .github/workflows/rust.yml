name: Build, Test, and Release

on:
  push:
    branches: [ "main" ]
    # Run the release job only when tags are pushed (e.g., v1.0.0, v2.1.3)
    tags: [ 'v*' ]
  pull_request:
    branches: [ "main" ]

env:
  # Default binary name - assumes your crate name is the binary name.
  # If your binary has a different name (e.g., specified in [[bin]] section of Cargo.toml),
  # set it explicitly here or modify the script steps to determine it.
  BINARY_NAME: thumed_login 

permissions:
  contents: write # Needed for softprops/action-gh-release to create releases

jobs:
  # Job for basic checks on pushes/PRs to main branch
  test:
    name: Test Suite
    # Don't run this job if a tag was pushed (to avoid redundancy with release job)
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/pull/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      - name: Check formatting
        run: cargo fmt -- --check
      - name: Build (Debug)
        run: cargo build --verbose
      - name: Run tests
        run: cargo test --verbose

  # Job for building release binaries for multiple targets
  build_release:
    name: Build Release Binaries
    # Only run this job if a tag was pushed
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        include:
          # Linux x86_64 (GNU)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64
            artifact_ext: tar.gz

          # macOS x86_64 (Intel)
          - os: macos-13 # Use specific older macOS version for Intel
            target: x86_64-apple-darwin
            name: macos-x86_64
            artifact_ext: tar.gz


          # macOS aarch64 (Apple Silicon/ARM)
          - os: macos-14 # Use specific newer macOS version for ARM
            target: aarch64-apple-darwin
            name: macos-aarch64
            artifact_ext: tar.gz


          # Windows x86_64 (MSVC)
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x86_64
            artifact_ext: zip
           

          # Optional: Windows x86_64 (GNU) - Requires mingw setup on Ubuntu
          # - os: ubuntu-latest
          #   target: x86_64-pc-windows-gnu
          #   name: windows-x86_64-gnu
          #   artifact_ext: zip
          #   setup_deps: sudo apt-get update && sudo apt-get install -y mingw-w64 gcc-mingw-w64 # Install linker
          #   archive_cmd: |
          #     zip ${{ env.ASSET_NAME }}.${{ matrix.artifact_ext }} ${{ env.BINARY_NAME }}.exe README.md LICENSE*

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
           # Key cache differently based on OS and target
          key: ${{ matrix.target }}

      # Optional: Install dependencies for specific targets (like mingw for windows-gnu)
      - name: Install dependencies (if needed)
        if: matrix.setup_deps != ''
        run: ${{ matrix.setup_deps }}

      - name: Build release binary
        uses: actions-rs/cargo@v1 # Using cargo action can sometimes simplify things
        with:
          command: build
          args: --release --target ${{ matrix.target }} --verbose
          use-cross: ${{ contains(matrix.target, 'windows-gnu') }} # Use cross if building windows-gnu on linux

      # Determine paths and names
      - name: Set asset paths and names
        id: set_names
        shell: bash
        run: |
          # Get the tag name (e.g., v1.2.3)
          TAG=${GITHUB_REF#refs/tags/}

          # Define binary path based on target
          BIN_PATH="target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}"
          ASSET_BASENAME="${{ env.BINARY_NAME }}-${TAG}-${{ matrix.name }}" # e.g., my_app-v1.0.0-linux-x86_64

          # Add .exe suffix for Windows targets
          if [[ "${{ matrix.os }}" == "windows-latest" || "${{ matrix.target }}" == "x86_64-pc-windows-gnu" ]]; then
            BIN_PATH="${BIN_PATH}.exe"
            # Rename binary locally for consistent archiving command if needed
            mv "$BIN_PATH" "${{ env.BINARY_NAME }}.exe"
            echo "BINARY_FILE=${{ env.BINARY_NAME }}.exe" >> $GITHUB_ENV
          else
            # Rename binary locally for consistent archiving command if needed
            mv "$BIN_PATH" "${{ env.BINARY_NAME }}"
            echo "BINARY_FILE=${{ env.BINARY_NAME }}" >> $GITHUB_ENV
          fi

          echo "RELEASE_DIR=${{ env.BINARY_NAME }}-${{ matrix.name }}" >> $GITHUB_ENV # Directory name inside artifact
          echo "ASSET_NAME=${ASSET_BASENAME}" >> $GITHUB_ENV # Base name for archive/asset
          echo "TAG=${TAG}" >> $GITHUB_ENV

      # Prepare the artifact (archive binary + readme/license)
      - name: Package artifact for release
        shell: bash # Use bash universally for consistency here, even on Windows runner
        run: |
          # Create staging directory
          mkdir staging
          cp "${{ env.BINARY_FILE }}" staging/
          # Try copying common files - ignore errors if they don't exist
          cp README.md staging/ || true
          cp LICENSE* staging/ || true # Copies LICENSE, LICENSE-MIT etc.

          # Run the OS-specific archive command
          cd staging
          ${{ matrix.archive_cmd }} # Run the command defined in the matrix

          # Move archive to top level for upload
          mv "${{ env.ASSET_NAME }}.${{ matrix.artifact_ext }}" ..
          cd ..

      # Upload artifact for the release job
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ASSET_NAME }}.${{ matrix.artifact_ext }} # Use the final archive name for the artifact name
          path: ${{ env.ASSET_NAME }}.${{ matrix.artifact_ext }} # Path to the archive file created

  # Job to create the actual GitHub Release and upload all built artifacts
  release:
    name: Create GitHub Release
    # Only run if the build_release job succeeded and a tag was pushed
    if: success() && startsWith(github.ref, 'refs/tags/')
    needs: [build_release] # Run after all matrix builds are done
    runs-on: ubuntu-latest
    steps:
      - name: Download all release artifacts
        uses: actions/download-artifact@v4
        with:
          # No specific name provided, downloads all artifacts from the workflow run
          # They will be placed in directories named after the artifact name
          path: release-artifacts # Download into a subdirectory

      - name: List downloaded artifacts (for debugging)
        run: find release-artifacts -type f

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2 # Use v2 or latest stable
        with:
          # Use the artifacts downloaded in the previous step.
          # The pattern should match the files inside the download directory.
          # Artifacts are downloaded into subdirectories named after the artifact name,
          # so we need to match files within those subdirs.
          files: release-artifacts/*/*.*
          # Automatically generates release notes from commits since last tag (optional)
          # generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Provided by Actions automatically
