name: Rust Build & Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  PROJECT_NAME: thumed_login

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_path: target/release/thumed_login
            asset_name: thumed_login-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_path: target/aarch64-apple-darwin/release/thumed_login
            asset_name: thumed_login-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_path: target/release/thumed_login.exe
            asset_name: thumed_login-windows-x86_64.exe

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
          profile: minimal

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ matrix.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ matrix.os }}-${{ matrix.target }}-cargo

      - name: Build for macOS ARM
        if: matrix.target == 'aarch64-apple-darwin'
        run: cargo build --release --target aarch64-apple-darwin

      - name: Build (standard)
        if: matrix.target != 'aarch64-apple-darwin'
        run: cargo build --release

      - name: Create directory for artifact
        run: |
          mkdir -p ${{ matrix.asset_name }}
          cp ${{ matrix.binary_path }} ${{ matrix.asset_name }}/

      - name: Compress artifact
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            7z a ${{ matrix.asset_name }}.zip ${{ matrix.asset_name }}
          else
            tar -czvf ${{ matrix.asset_name }}.tar.gz ${{ matrix.asset_name }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}.*
          if-no-files-found: error

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          files: artifacts/**/*.{zip,tar.gz}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
